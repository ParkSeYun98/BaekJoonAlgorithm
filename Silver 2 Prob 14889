import java.util.*;
import java.io.*;

public class Main {
	public static int N;
	public static int map[][];
	public static boolean visited[];
	
	public static int min = Integer.MAX_VALUE;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		N = Integer.parseInt(br.readLine());;
		
		map = new int[N][N];
		visited = new boolean[N];
		
		for(int i=0; i<N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			
			for(int j=0; j<N; j++)
				map[i][j] = Integer.parseInt(st.nextToken());
		}
		DFS(0, 0);
	
		System.out.println(min);
	}
	
	public static void DFS(int index, int recursion) {
		if(recursion == N/2) {
			Best();
			return;
		}
		
		for(int i=index; i<N; i++) {
			if(!visited[i]) {
				visited[i] = true;
				DFS(i+1, recursion+1);
				visited[i] = false;
			}
		}
	}
	
	public static void Best() {
		int start = 0;
		int link = 0;
		
		for(int i=0; i<N; i++) {
			for(int j=i+1; j<N; j++) {
				if(visited[i] && visited[j]) {
					start += map[i][j];
					start += map[j][i];
				}
				else if(!visited[i] && !visited[j]) {
					link += map[i][j];
					link += map[j][i];
				}
			}
		}
		
		int distance = Math.abs(start - link);
		
		min = Math.min(min, distance);
	}
}
