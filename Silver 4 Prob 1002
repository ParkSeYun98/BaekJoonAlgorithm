import java.util.*;
import java.io.*;

public class Main {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		int N = Integer.parseInt(br.readLine());
		
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			
			int x1 = Integer.parseInt(st.nextToken());
			int y1 = Integer.parseInt(st.nextToken());
			int r1 = Integer.parseInt(st.nextToken());
			
			int x2 = Integer.parseInt(st.nextToken());
			int y2 = Integer.parseInt(st.nextToken());
			int r2 = Integer.parseInt(st.nextToken());
			
			System.out.println(func(x1, y1, r1, x2, y2, r2));
		}	
	}
	
	public static int func(int x1, int y1, int r1, int x2, int y2, int r2) {
		// 두 원의 중점 간 거리의 제곱
		int distance_square = (int)(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
		
		// 중점, 반지름이 모두 같은 경우
		if(x1 == x2 && y1 == y2 && r1 == r2)
			return -1;  // 무한대
		// 두 원이 서로 내부에 있지 않고 만나지 않는 경우
		else if(distance_square > Math.pow(r1 + r2, 2))
			return 0;
		// 한 원이 다른 원 내부에 있으나, 만나지 않는 경우
		else if(distance_square < Math.pow(r1 - r2, 2))
			return 0;
		// 한 원이 다른 원 내부에 있고 한 점에서 만나는 경우
		else if(distance_square == Math.pow(r1 - r2, 2))
			return 1;
		// 두 원이 서로 내부에 있지 않고 한 점에서 만나는 경우
		else if(distance_square == Math.pow(r1 + r2, 2))
			return 1;
		// 두 원이 두 점에서 겹치는 경우
		else
			return 2;
	}
}
