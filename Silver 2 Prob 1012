import java.util.*;
import java.io.*;

public class Main {
	static int M;
	static int N;
	static int K;
	
	static int[] direction1 = {-1, 1, 0, 0};
	static int[] direction2 = {0, 0, -1, 1};
	
	static int[][] map;
	static boolean[][] visit;
	
	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
			
		for(int i=1; i<=T; i++) {
			M = sc.nextInt();
			N = sc.nextInt();
			K = sc.nextInt();
			
			map = new int[M][N];
			visit = new boolean[M][N];
			
			for(int j=0; j<K; j++) 
				map[sc.nextInt()][sc.nextInt()] = 1;
			
			
			int count = 0;
			
			for(int j=0; j<M; j++) {
				for(int k=0; k<N; k++) {
					if(map[j][k] == 1 && !visit[j][k]) {
						DFS(j, k);
						count++;
					}
				}
			}
			System.out.println(count);
		}
	}
		
		public static void DFS(int x, int y) {
			visit[x][y] = true;
				
			for(int i=0; i<4; i++) {
				int checkdirection1 = x + direction1[i];
				int checkdirection2 = y + direction2[i];
				
				if(checkdirection1 >= 0 && checkdirection2 >= 0 && checkdirection1 < M && checkdirection2 < N) {
					if(map[checkdirection1][checkdirection2] == 1 && !visit[checkdirection1][checkdirection2])
							DFS(checkdirection1, checkdirection2);
				}
			}
	}	 
}
