import java.util.*;
import java.io.*;

public class Main {
	public static int w, h;
	public static int map[][];
	public static int dx[] = {0, 1, 1, 1, 0, -1, -1, -1}; // 상부터 시계방향으로 
	public static int dy[] = {1, 1, 0, -1, -1, -1, 0, 1};
	public static boolean visited[][];
	public static int island = 0;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		while(true) {
			st = new StringTokenizer(br.readLine(), " ");
			
			w = Integer.parseInt(st.nextToken());
			h = Integer.parseInt(st.nextToken());
			
			if((w == 0) && (h == 0))
				break;
			
			map = new int[h][w];
			visited = new boolean[h][w];
			island = 0;
			
			for(int i=0; i<h; i++) {
				st = new StringTokenizer(br.readLine());
				
				for(int j=0; j<w; j++)
					map[i][j] = Integer.parseInt(st.nextToken());
			}
			
			for(int i=0; i<h; i++) {
				for(int j=0; j<w; j++) {
					if(map[i][j] == 1 && !visited[i][j]) {
						visited[i][j] = true;
						DFS(i, j);
						island++;
					}
				}
			}
			
			System.out.println(island);
		}
	}
	
	public static void DFS(int row, int col) {
		for(int i=0; i<8; i++) {
			int nx = row + dx[i];
			int ny = col + dy[i];
			
			if(nx<0 || nx>=h || ny<0 || ny>=w || map[nx][ny]==0 || visited[nx][ny])
				continue;
			
			visited[nx][ny] = true;
			DFS(nx, ny);
		}
		
		return;
	}
}
